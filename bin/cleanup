#!/bin/bash -e
#set -x
# Used colors
BLUE='\033[0;34m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'

# Text Transform
bold=$(tput bold)
normal=$(tput sgr0)

die () {
    echo -e "${RED}$@${NC}"

    exit 1
}

good () {
    GREEN='\033[0;32m'
    NC='\033[0m' # No color
    echo -e "${GREEN}done${NC}"
}

alert () {
    GREEN='\033[0;32m'
    NC='\033[0m'

    echo -e "$GREEN$@$NC"
    exit 1
}

actionCleanUp () {
    # Make Parent folder if doesn't exist
    echo -n "creating directory CLEANUP... - "

    if [ ! -d "CLEANUP" ]; then
        mkdir CLEANUP
    fi

    good

    printf "\n"

    # Make Necessary Folders
    directories=('Documents' 'Pictures' 'Videos' 'Music' 'Compressed' 'Webfiles' 'Softwares')

    for directory in ${directories[@]}
    do
        path="CLEANUP/$directory"

        echo -n "creating directory CLEANUP/$directory... - "

        if [ ! -d "$path" ]; then
            mkdir $path
        fi

        good

        printf "\n"
        printf "\n"
    done

    # Group Files per Extension
    declare -a fileGroups

    # Documents
    fileGroups[0]='docx:doc:odt:pdf:txt:epub:ppt:pptx:sql'

    # Pictures
    fileGroups[1]='jpg:jpeg:svg:gif:png'

    # Videos
    fileGroups[2]='avi:mp4:mkv'

    # Music
    fileGroups[3]='mp3:wav'

    # Compressed
    fileGroups[4]='tar.gz:zip:tar.xz'

    # Webfiles
    fileGroups[5]='html:js:css:php'

    # Softwares
    fileGroups[6]='exe:deb:bin:apk'

    # move files to each to respective folder
    echo -e "${YELLOW}${bold}---START CLEANUP PROCESS----${normal}${NC}"

    printf "\n"

    for ((i=0; i<${#fileGroups[@]}; i++))
    do
        directory=${directories[i]}
        fileGroup=${fileGroups[i]}
        extensions=${fileGroup//:/ }
        count=0

        echo -e "${BLUE}moving files into CLEANUP/$directory${NC}"

        printf "\n"

        for extension in $extensions
        do
            for file in *.$extension; do
                [ -f "$file" ] || break

                echo -n "    moving $file - "

                mv "$file" "CLEANUP/$directory/."

                good

                let "count=$count+1"

                printf "\n"
            done
        done

        echo -e "--${GREEN}$count files moved into CLEANUP/$directory${NC}--"

        printf "\n"
    done

    echo -e "${GREEN}${bold}---CLEANUP PROCESS COMPLETED: Check directory CLEANUP in your current directory----${normal}${NC}"

    exit
}

actionHelp () {
    echo -e "${BLUE}Hello "$(whoami)"!${NC}"
    printf "\n"

    printf "${YELLOW}Version:$NC cleanup 1.0.3
${YELLOW}Copyright:$NC Â© $YEAR Henry Falade (cleanup)
${YELLOW}Usage:$NC cleanup [argument]
\n
${YELLOW}Available arguments:${NC}
\t${GREEN}start${NC}\t Cleans up your folder
\t${GREEN}undo${NC}\t Returns files to previous state/folder
\t${GREEN}update${NC}\t Uses git to pull latest update
\t${GREEN}help${NC}\t Displays help for tool usage
\n
${YELLOW}Description:$NC
\t- This tool creates a folder ${bold}CLEANUP${normal} in the directory it is being ran.
\t- After this, it creates group folders (eg. Documents, Music, etc)
\t  inside the newly created ${bold}CLEANUP${normal} folder.
\t- Finally, it moves files using their extensions to group them into
\t  the best-suiting new folder.
\t- To undo this action, run ${bold}cleanup undo${normal}.
"

    exit
}

actionUndo () {

    [ -d "CLEANUP" ] || die "No CLEANUP folder found!"

    echo -e "Undo-ing file move and deleting folders - "

    find CLEANUP -type f -exec mv -i {} . \;
    find CLEANUP -type d -not -path "CLEANUP" -exec rmdir {} +

    rmdir CLEANUP

    good

}

actionUpdate () {
    echo -e "Checking for update..."

    presentfolder=$(pwd)

    cd ~/cleanup && git pull origin master

    cd $presentfolder

    good
}

# Check that action was stated
[[ -n "$1" ]] || actionHelp

# Check that action is valid
case "$1" in
    "help")
        actionHelp
        ;;
    "start")
        actionCleanUp
        ;;
    "undo")
        actionUndo
        ;;
    "update")
        actionUpdate
        ;;
    *)
        die "${bold}cleanup: '$1' is not a cleanup command. See ${GREEN}'cleanup help'${NC}.${normal}"
esac
